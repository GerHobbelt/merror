// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "merror/internal/preprocessor.h"

#include "gtest/gtest.h"

namespace merror {
namespace internal {
namespace {

#define MERROR_TEST_PAIR x, y

TEST(Preprocessor, Stringize) {
  EXPECT_STREQ("", MERROR_INTERNAL_STRINGIZE());
  EXPECT_STREQ("a", MERROR_INTERNAL_STRINGIZE(a));
  EXPECT_STREQ("a, b", MERROR_INTERNAL_STRINGIZE(a, b));
  EXPECT_STREQ(".", MERROR_INTERNAL_STRINGIZE(.));
  EXPECT_STREQ("x, y", MERROR_INTERNAL_STRINGIZE(MERROR_TEST_PAIR));
}

TEST(Preprocessor, Narg) {
  EXPECT_EQ(1, MERROR_INTERNAL_NARG(x));
  EXPECT_EQ(1, MERROR_INTERNAL_NARG(x));
  EXPECT_EQ(2, MERROR_INTERNAL_NARG(x, y));
  EXPECT_EQ(3, MERROR_INTERNAL_NARG(x, y, z));
  EXPECT_EQ(1, MERROR_INTERNAL_NARG(.));
  EXPECT_EQ(2, MERROR_INTERNAL_NARG(MERROR_TEST_PAIR));
}

TEST(Preprocessor, Vcat) {
  EXPECT_STREQ("", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_VCAT()));
  EXPECT_STREQ("x", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_VCAT(x)));
  EXPECT_STREQ("xy", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_VCAT(x, y)));
  EXPECT_STREQ("xy, z",
               MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_VCAT(x, y, z)));
  EXPECT_STREQ(
      "xy", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_VCAT(MERROR_TEST_PAIR)));
}

TEST(Preprocessor, StartsWithUnderscore) {
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN());
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(1));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(x));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(x1));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(x()));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(x(1)));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(x<1>()));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(x<1, 2>()));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(x() << 1));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(x() << f<1, 2>()));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(__));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_1));
  EXPECT_FALSE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_x));

  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_.x));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_.x1));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_.x()));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_.x(1)));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_.x<1>()));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_.x<1, 2>()));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_.x() << 1));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_.x() << f<1, 2>()));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_ << 1));
  EXPECT_TRUE(MERROR_INTERNAL_STARTS_WITH_UNDERSCORE_TOKEN(_ << f<1, 2>()));
}

#define MERROR_TEST_EATER0(...)
#define MERROR_TEST_EATER1(...) ,
#define MERROR_TEST_EATER2(...) (/*empty*/)
#define MERROR_TEST_EATER3(...) (/*empty*/),
#define MERROR_TEST_EATER4(...) MERROR_TEST_EATER1
#define MERROR_TEST_EATER5(...) MERROR_TEST_EATER2
#define MERROR_TEST_MAC0() ()
#define MERROR_TEST_MAC1(x) ()
#define MERROR_TEST_MAC2(x, y) ()
#define MERROR_TEST_MACV(...) ()
#define MERROR_TEST_EMPTY
#define MERROR_TEST_COMMA ,

TEST(Preprocessor, IsEmpty) {
  // Empty.
  EXPECT_STREQ("1", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY()));
  EXPECT_STREQ(
      "1", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY(/*comment*/)));
  EXPECT_STREQ("1", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_EMPTY)));

  // Not empty.
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY("")));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY( :)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY(a)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY(a, b)));
  EXPECT_STREQ("0",
               MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY(a, b, c)));
  EXPECT_STREQ("0",
               MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY(a, b, c, d)));
  EXPECT_STREQ(
      "0", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY(a, b, c, d, e)));
  EXPECT_STREQ("0",
               MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY((void))));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY((void), b, c, d)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IS_EMPTY(, )));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_COMMA)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_EATER0)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_EATER1)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_EATER2)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_EATER3)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_EATER4)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_MAC0)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_MAC1)));
  EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
                        MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_MACV)));

  // This one fails with the following error:
  //
  //   macro "MERROR_TEST_MAC2" requires 2 arguments, but only 1 given.
  //
  // EXPECT_STREQ("0", MERROR_INTERNAL_STRINGIZE(
  //                       MERROR_INTERNAL_IS_EMPTY(MERROR_TEST_MAC2)));
}

#define MERROR_TEST_ZERO 0
#define MERROR_TEST_ONE 1

TEST(Preprocessor, If) {
  EXPECT_STREQ("yea",
               MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IF(1, yea, nay)));
  EXPECT_STREQ("nay",
               MERROR_INTERNAL_STRINGIZE(MERROR_INTERNAL_IF(0, yea, nay)));
  EXPECT_STREQ("yea", MERROR_INTERNAL_STRINGIZE(
                          MERROR_INTERNAL_IF(MERROR_TEST_ONE, yea, nay)));
  EXPECT_STREQ("nay", MERROR_INTERNAL_STRINGIZE(
                          MERROR_INTERNAL_IF(MERROR_TEST_ZERO, yea, nay)));
}

}  // namespace
}  // namespace internal
}  // namespace merror
